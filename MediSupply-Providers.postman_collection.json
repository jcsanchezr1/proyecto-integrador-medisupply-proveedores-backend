{
	"info": {
		"_postman_id": "d6cb2430-6c5f-4d66-967a-2e86c24055e8",
		"name": "MediSupply Providers API - Con Datos Aleatorios",
		"description": "Colección para validar el servicio de proveedores MediSupply con datos aleatorios generados automáticamente",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2750860",
		"_collection_link": "https://timecontrol.postman.co/workspace/TCT~e4bf613c-84ca-4624-ad9c-4c8c0259e211/collection/2750860-d6cb2430-6c5f-4d66-967a-2e86c24055e8?action=share&source=collection_link&creator=2750860"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea 'pong'",
							"pm.test('Response is pong', function () {",
							"    const responseText = pm.response.text().trim();",
							"    pm.expect(responseText).to.eql('\"pong\"');",
							"});",
							"",
							"console.log('Validaciones completadas para health check');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_local_proveedor}}/providers/ping",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers",
						"ping"
					]
				}
			},
			"response": [
				{
					"name": "Health Check Success",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_local_proveedor}}/providers/ping",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers",
								"ping"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Servicio de proveedores funcionando correctamente\",\n  \"data\": {\n    \"service\": \"providers\",\n    \"status\": \"healthy\",\n    \"version\": \"1.0.0\"\n  }\n}"
				}
			]
		},
		{
			"name": "Auth Token Admin - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar respuesta exitosa de autenticación",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('access_token');",
							"    pm.expect(responseJson.access_token).to.be.a('string');",
							"    pm.expect(responseJson.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response has token_type\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('token_type');",
							"    pm.expect(responseJson.token_type).to.eql('Bearer');",
							"});",
							"",
							"pm.test(\"Response has expires_in\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('expires_in');",
							"    pm.expect(responseJson.expires_in).to.be.a('number');",
							"    pm.expect(responseJson.expires_in).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Response has refresh_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('refresh_token');",
							"    pm.expect(responseJson.refresh_token).to.be.a('string');",
							"    pm.expect(responseJson.refresh_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Guardar tokens para uso posterior",
							"const responseJson = pm.response.json();",
							"if (responseJson && responseJson.access_token) {",
							"    pm.globals.set('auth_token', responseJson.access_token);",
							"    console.log('Token de autenticación guardado');",
							"}",
							"",
							"// Guardar refresh_token para logout",
							"if (responseJson && responseJson.refresh_token) {",
							"    pm.globals.set('refresh_token', responseJson.refresh_token);",
							"    console.log('Refresh token guardado para logout');",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": \"medisupply05@gmail.com\",\n    \"password\": \"Admin123456\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/auth/token",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Autentica un usuario admin usando las credenciales creadas anteriormente"
			},
			"response": []
		},
		{
			"name": "Listar Proveedores - Página 1 (Por Defecto)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('providers');",
							"    pm.expect(jsonData.data).to.have.property('pagination');",
							"});",
							"",
							"// Validar estructura de paginación",
							"pm.test('Pagination structure is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    const pagination = jsonData.data.pagination;",
							"    pm.expect(pagination).to.have.property('page');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('total_pages');",
							"    pm.expect(pagination).to.have.property('has_next');",
							"    pm.expect(pagination).to.have.property('has_prev');",
							"});",
							"",
							"// Validar que la página sea 1 por defecto",
							"pm.test('Default page is 1', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.page).to.eql(1);",
							"});",
							"",
							"// Validar que per_page sea 10 por defecto",
							"pm.test('Default per_page is 10', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.per_page).to.eql(10);",
							"});",
							"",
							"// Validar que providers sea un array",
							"pm.test('Providers is an array', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.providers).to.be.an('array');",
							"});",
							"",
							"console.log('Validaciones completadas para listar proveedores página 1');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Lista de Proveedores - Página 1",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Lista de proveedores obtenida exitosamente\",\n  \"data\": {\n    \"providers\": [\n      {\n        \"id\": \"uuid-generado\",\n        \"name\": \"Farmacia San José\",\n        \"email\": \"ventas@farmacia.com\",\n        \"phone\": \"3001234567\"\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"per_page\": 10,\n      \"total\": 25,\n      \"total_pages\": 3,\n      \"has_next\": true,\n      \"has_prev\": false,\n      \"next_page\": 2,\n      \"prev_page\": null\n    }\n  }\n}"
				}
			]
		},
		{
			"name": "Listar Proveedores - Página 1 (5 por página)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('providers');",
							"    pm.expect(jsonData.data).to.have.property('pagination');",
							"});",
							"",
							"// Validar estructura de paginación",
							"pm.test('Pagination structure is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    const pagination = jsonData.data.pagination;",
							"    pm.expect(pagination).to.have.property('page');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('total_pages');",
							"    pm.expect(pagination).to.have.property('has_next');",
							"    pm.expect(pagination).to.have.property('has_prev');",
							"});",
							"",
							"// Validar que la página sea 1",
							"pm.test('Page is 1', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.page).to.eql(1);",
							"});",
							"",
							"// Validar que per_page sea 5",
							"pm.test('Per page is 5', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.per_page).to.eql(5);",
							"});",
							"",
							"// Validar que providers sea un array",
							"pm.test('Providers is an array', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.providers).to.be.an('array');",
							"});",
							"",
							"// Validar que el array de providers no exceda per_page",
							"pm.test('Providers count does not exceed per_page', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.providers.length).to.be.at.most(jsonData.data.pagination.per_page);",
							"});",
							"",
							"console.log('Validaciones completadas para listar proveedores página 1 (5 por página)');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers?page=1&per_page=5",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "5"
						}
					]
				}
			},
			"response": [
				{
					"name": "Lista de Proveedores - Página 1 (5 elementos)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_local_proveedor}}/providers?page=1&per_page=5",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Lista de proveedores obtenida exitosamente\",\n  \"data\": {\n    \"providers\": [\n      {\n        \"id\": \"uuid-1\",\n        \"name\": \"Farmacia ABC\",\n        \"email\": \"ventas@abc.com\",\n        \"phone\": \"3001111111\"\n      },\n      {\n        \"id\": \"uuid-2\",\n        \"name\": \"Farmacia XYZ\",\n        \"email\": \"ventas@xyz.com\",\n        \"phone\": \"3002222222\"\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"per_page\": 5,\n      \"total\": 12,\n      \"total_pages\": 3,\n      \"has_next\": true,\n      \"has_prev\": false,\n      \"next_page\": 2,\n      \"prev_page\": null\n    }\n  }\n}"
				}
			]
		},
		{
			"name": "Listar Proveedores - Página 2 (2 por página)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('providers');",
							"    pm.expect(jsonData.data).to.have.property('pagination');",
							"});",
							"",
							"// Validar estructura de paginación",
							"pm.test('Pagination structure is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    const pagination = jsonData.data.pagination;",
							"    pm.expect(pagination).to.have.property('page');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('total_pages');",
							"    pm.expect(pagination).to.have.property('has_next');",
							"    pm.expect(pagination).to.have.property('has_prev');",
							"});",
							"",
							"// Validar que la página sea 2",
							"pm.test('Page is 2', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.page).to.eql(2);",
							"});",
							"",
							"// Validar que per_page sea 2",
							"pm.test('Per page is 2', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.pagination.per_page).to.eql(2);",
							"});",
							"",
							"// Validar que providers sea un array",
							"pm.test('Providers is an array', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.providers).to.be.an('array');",
							"});",
							"",
							"// Validar que el array de providers no exceda per_page",
							"pm.test('Providers count does not exceed per_page', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.providers.length).to.be.at.most(jsonData.data.pagination.per_page);",
							"});",
							"",
							"console.log('Validaciones completadas para listar proveedores página 2');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers?page=2&per_page=2",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "per_page",
							"value": "2"
						}
					]
				}
			},
			"response": [
				{
					"name": "Error - Página Inválida",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_local_proveedor}}/providers?page=0",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El parámetro 'page' debe ser mayor a 0\"\n}"
				}
			]
		},
		{
			"name": "Listar Proveedores - Página Inválida (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql('El parámetro \\'page\\' debe ser mayor a 0');",
							"});",
							"",
							"console.log('Validaciones completadas para error de página inválida');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers?page=0",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar Proveedores - Per Page Inválido (Error)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar valores de per_page inválidos",
							"const perPageInvalidos = [0, -1, 101, 150, 200, 999, 'abc', 'texto', null, undefined];",
							"const perPageInvalido = perPageInvalidos[Math.floor(Math.random() * perPageInvalidos.length)];",
							"",
							"pm.environment.set('per_page_invalido', perPageInvalido);",
							"console.log('Per page inválido generado:', perPageInvalido);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea exitosa o de error",
							"pm.test('Status code is 200 or 400', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 400) {",
							"        pm.expect(jsonData).to.have.property('error');",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData).to.have.property('data');",
							"    }",
							"});",
							"",
							"// Validar comportamiento específico según el código de respuesta",
							"pm.test('Response behavior is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 400) {",
							"        // Si es error, validar mensaje de error",
							"        pm.expect(jsonData.error).to.include('per_page');",
							"        pm.expect(jsonData.error).to.include('entre 1 y 100');",
							"    } else {",
							"        // Si es éxito, validar que la paginación esté limitada",
							"        pm.expect(jsonData.data).to.have.property('pagination');",
							"        const perPage = jsonData.data.pagination.per_page;",
							"        pm.expect(perPage).to.be.at.most(100);",
							"    }",
							"});",
							"",
							"console.log('Validaciones completadas para error de per_page inválido');",
							"console.log('Valor enviado:', pm.environment.get('per_page_invalido'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers?per_page={{per_page_invalido}}",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					],
					"query": [
						{
							"key": "per_page",
							"value": "{{per_page_invalido}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Todos los Proveedores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"});",
							"",
							"// Validar que el mensaje sea correcto",
							"pm.test('Success message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('Se eliminaron');",
							"    pm.expect(jsonData.message).to.include('proveedores exitosamente');",
							"});",
							"",
							"// Validar que el conteo sea un número",
							"pm.test('Deleted count is present', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('deleted_count');",
							"    pm.expect(jsonData.data.deleted_count).to.be.a('number');",
							"});",
							"",
							"// Guardar el conteo de eliminados para uso posterior",
							"const jsonData = pm.response.json();",
							"pm.environment.set('deleted_count', jsonData.data.deleted_count);",
							"",
							"console.log('Validaciones completadas para eliminar todos los proveedores');",
							"console.log('Proveedores eliminados:', jsonData.data.deleted_count);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_proveedor}}/providers/all",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers",
						"all"
					]
				}
			},
			"response": [
				{
					"name": "Proveedor Creado Exitosamente - JSON",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{nombre_aleatorio}}\",\n  \"email\": \"{{email_aleatorio}}\",\n  \"phone\": \"{{telefono_aleatorio}}\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Proveedor registrado exitosamente\",\n  \"data\": {\n    \"id\": \"uuid-generado\",\n    \"name\": \"Farmacia San José\",\n    \"email\": \"ventas@farmacia.com\",\n    \"phone\": \"3001234567\",\n    \"logo_filename\": \"\",\n    \"created_at\": \"2025-10-05T19:10:36.311869\",\n    \"updated_at\": \"2025-10-05T19:10:36.311870\"\n  }\n}"
				}
			]
		},
		{
			"name": "Crear Proveedor - Caso Perfecto JSON (Datos Aleatorios)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_aleatorio', nombreAleatorio);",
							"pm.environment.set('email_aleatorio', emailAleatorio);",
							"pm.environment.set('telefono_aleatorio', telefonoAleatorio);",
							"",
							"console.log('Datos generados:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('phone');",
							"});",
							"",
							"// Validar que el mensaje sea correcto",
							"pm.test('Success message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Proveedor registrado exitosamente');",
							"});",
							"",
							"// Validar que el ID sea un UUID válido",
							"pm.test('ID is valid UUID', function () {",
							"    const jsonData = pm.response.json();",
							"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"    pm.expect(jsonData.data.id).to.match(uuidRegex);",
							"});",
							"",
							"// Validar que los datos coincidan con los enviados",
							"pm.test('Data matches request', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.eql(pm.environment.get('nombre_aleatorio'));",
							"    pm.expect(jsonData.data.email).to.eql(pm.environment.get('email_aleatorio'));",
							"    pm.expect(jsonData.data.phone).to.eql(pm.environment.get('telefono_aleatorio'));",
							"});",
							"",
							"// Validar timestamps",
							"pm.test('Timestamps are present', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('created_at');",
							"    pm.expect(jsonData.data).to.have.property('updated_at');",
							"});",
							"",
							"console.log('Validaciones completadas para creación exitosa con datos aleatorios');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{nombre_aleatorio}}\",\n  \"email\": \"{{email_aleatorio}}\",\n  \"phone\": \"{{telefono_aleatorio}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Proveedor Creado Exitosamente - JSON Aleatorio",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{nombre_aleatorio}}\",\n  \"email\": \"{{email_aleatorio}}\",\n  \"phone\": \"{{telefono_aleatorio}}\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Proveedor registrado exitosamente\",\n  \"data\": {\n    \"id\": \"uuid-generado\",\n    \"name\": \"{{nombre_aleatorio}}\",\n    \"email\": \"{{email_aleatorio}}\",\n    \"phone\": \"{{telefono_aleatorio}}\",\n    \"logo_filename\": \"\",\n    \"created_at\": \"2025-10-05T19:10:36.311869\",\n    \"updated_at\": \"2025-10-05T19:10:36.311870\"\n  }\n}"
				}
			]
		},
		{
			"name": "Crear Proveedor - Caso Perfecto Multipart (Datos Aleatorios)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'contacto' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_multipart', nombreAleatorio);",
							"pm.environment.set('email_multipart', emailAleatorio);",
							"pm.environment.set('telefono_multipart', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Multipart:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('phone');",
							"});",
							"",
							"// Validar que el mensaje sea correcto",
							"pm.test('Success message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Proveedor registrado exitosamente');",
							"});",
							"",
							"// Validar que el ID sea un UUID válido",
							"pm.test('ID is valid UUID', function () {",
							"    const jsonData = pm.response.json();",
							"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"    pm.expect(jsonData.data.id).to.match(uuidRegex);",
							"});",
							"",
							"// Validar que los datos coincidan con los enviados",
							"pm.test('Data matches request', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.eql(pm.environment.get('nombre_multipart'));",
							"    pm.expect(jsonData.data.email).to.eql(pm.environment.get('email_multipart'));",
							"    pm.expect(jsonData.data.phone).to.eql(pm.environment.get('telefono_multipart'));",
							"});",
							"",
							"// Validar timestamps",
							"pm.test('Timestamps are present', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('created_at');",
							"    pm.expect(jsonData.data).to.have.property('updated_at');",
							"});",
							"",
							"console.log('Validaciones completadas para creación exitosa con datos aleatorios (Multipart)');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_multipart}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_multipart}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_multipart}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Proveedor Creado Exitosamente - Multipart Aleatorio",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{nombre_multipart}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email_multipart}}",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "{{telefono_multipart}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Proveedor registrado exitosamente\",\n  \"data\": {\n    \"id\": \"uuid-generado\",\n    \"name\": \"{{nombre_multipart}}\",\n    \"email\": \"{{email_multipart}}\",\n    \"phone\": \"{{telefono_multipart}}\",\n    \"logo_filename\": \"\",\n    \"created_at\": \"2025-10-05T19:10:36.311869\",\n    \"updated_at\": \"2025-10-05T19:10:36.311870\"\n  }\n}"
				}
			]
		},
		{
			"name": "Crear Proveedor - Con Logo Válido (Datos Aleatorios)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_logo', nombreAleatorio);",
							"pm.environment.set('email_logo', emailAleatorio);",
							"pm.environment.set('telefono_logo', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Logo:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('phone');",
							"});",
							"",
							"// Validar que el mensaje sea correcto",
							"pm.test('Success message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Proveedor registrado exitosamente');",
							"});",
							"",
							"// Validar que el ID sea un UUID válido",
							"pm.test('ID is valid UUID', function () {",
							"    const jsonData = pm.response.json();",
							"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"    pm.expect(jsonData.data.id).to.match(uuidRegex);",
							"});",
							"",
							"// Validar que los datos coincidan con los enviados",
							"pm.test('Data matches request', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.eql(pm.environment.get('nombre_logo'));",
							"    pm.expect(jsonData.data.email).to.eql(pm.environment.get('email_logo'));",
							"    pm.expect(jsonData.data.phone).to.eql(pm.environment.get('telefono_logo'));",
							"});",
							"",
							"// Validar timestamps",
							"pm.test('Timestamps are present', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('created_at');",
							"    pm.expect(jsonData.data).to.have.property('updated_at');",
							"});",
							"",
							"console.log('Validaciones completadas para creación exitosa con logo válido');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_logo}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_logo}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_logo}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Nombre Vacío",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"3001234567\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Nombre' es obligatorio\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Nombre Vacío",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para otros campos",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('email_nombre_vacio', emailAleatorio);",
							"pm.environment.set('telefono_nombre_vacio', telefonoAleatorio);",
							"",
							"console.log('Datos generados para validación de nombre vacío:');",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('name');",
							"    pm.expect(jsonData.error).to.include('obligatorio');",
							"});",
							"",
							"// Validar que el error sea específico del campo nombre",
							"pm.test('Error is name-specific', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error.toLowerCase()).to.include('name');",
							"});",
							"",
							"console.log('Validaciones completadas para error de nombre vacío');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"\",\n  \"email\": \"{{email_nombre_vacio}}\",\n  \"phone\": \"{{telefono_nombre_vacio}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validaciones - Nombre con Caracteres Especiales",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar nombre con caracteres especiales",
							"const nombresInvalidos = ['Farmacia@José#123', 'Farmacia$%&', 'Farmacia<>', 'Farmacia!@#', 'Farmacia***'];",
							"const nombreInvalido = nombresInvalidos[Math.floor(Math.random() * nombresInvalidos.length)];",
							"",
							"pm.environment.set('nombre_invalido', nombreInvalido);",
							"console.log('Nombre inválido generado:', nombreInvalido);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('Nombre');",
							"    pm.expect(jsonData.error).to.include('caracteres');",
							"});",
							"",
							"console.log('Validaciones completadas para error de nombre con caracteres especiales');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{nombre_invalido}}\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"3001234567\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Email Vacío",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"\",\n  \"phone\": \"3001234567\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Correo electrónico' es obligatorio\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Email Vacío",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('email');",
							"    pm.expect(jsonData.error).to.include('obligatorio');",
							"});",
							"",
							"console.log('Validaciones completadas para error de email vacío');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"\",\n  \"phone\": \"3001234567\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Email Sin @",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"{{email_invalido}}\",\n  \"phone\": \"3001234567\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Correo electrónico' debe tener un formato válido\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Email Sin @",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar emails inválidos sin @",
							"const emailsInvalidos = ['ventasfarmacia.com', 'contacto.farmacia.com', 'ventas farmacia com', 'ventasfarmacia', 'ventas@farmacia.com@', 'usuario.dominio', 'email_sin_arroba', 'test.domain', 'usuario123dominio'];",
							"const emailInvalido = emailsInvalidos[Math.floor(Math.random() * emailsInvalidos.length)];",
							"",
							"// Generar datos aleatorios para otros campos",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte'];",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"pm.environment.set('email_invalido', emailInvalido);",
							"pm.environment.set('nombre_email_invalido', nombreAleatorio);",
							"pm.environment.set('telefono_email_invalido', telefonoAleatorio);",
							"",
							"console.log('Datos generados para validación de email sin @:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email inválido:', emailInvalido);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('email');",
							"    pm.expect(jsonData.error).to.include('formato');",
							"});",
							"",
							"// Validar que el error sea específico del campo email",
							"pm.test('Error is email-specific', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error.toLowerCase()).to.include('correo');",
							"});",
							"",
							"console.log('Validaciones completadas para error de email sin @');",
							"console.log('Email enviado:', pm.environment.get('email_invalido'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{nombre_email_invalido}}\",\n  \"email\": \"{{email_invalido}}\",\n  \"phone\": \"{{telefono_email_invalido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validaciones - Email Sin Dominio",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar emails inválidos sin dominio",
							"const emailsSinDominio = ['ventas@', 'usuario@', 'test@', 'contacto@', 'admin@', 'user@', 'email@', 'farmacia@'];",
							"const emailSinDominio = emailsSinDominio[Math.floor(Math.random() * emailsSinDominio.length)];",
							"",
							"// Generar datos aleatorios para otros campos",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte'];",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"pm.environment.set('email_sin_dominio', emailSinDominio);",
							"pm.environment.set('nombre_email_sin_dominio', nombreAleatorio);",
							"pm.environment.set('telefono_email_sin_dominio', telefonoAleatorio);",
							"",
							"console.log('Datos generados para validación de email sin dominio:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email sin dominio:', emailSinDominio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('email');",
							"    pm.expect(jsonData.error).to.include('formato');",
							"});",
							"",
							"// Validar que el error sea específico del campo email",
							"pm.test('Error is email-specific', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error.toLowerCase()).to.include('correo');",
							"});",
							"",
							"console.log('Validaciones completadas para error de email sin dominio');",
							"console.log('Email enviado:', pm.environment.get('email_sin_dominio'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{nombre_email_sin_dominio}}\",\n  \"email\": \"{{email_sin_dominio}}\",\n  \"phone\": \"{{telefono_email_sin_dominio}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validaciones - Email Sin Extensión",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('email');",
							"    pm.expect(jsonData.error).to.include('formato');",
							"});",
							"",
							"console.log('Validaciones completadas para error de email sin extensión');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia\",\n  \"phone\": \"3001234567\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Teléfono Vacío",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Teléfono' es obligatorio\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Teléfono Vacío",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include('phone');",
							"    pm.expect(jsonData.error).to.include('obligatorio');",
							"});",
							"",
							"console.log('Validaciones completadas para error de teléfono vacío');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Teléfono con Letras",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"{{telefono_invalido}}\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Teléfono' debe contener solo números\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Teléfono con Letras",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar teléfonos inválidos con letras",
							"const telefonosInvalidos = ['300-123-4567', '300 123 4567', '300.123.4567', '300abc123', 'abc123456', '300-abc-4567'];",
							"const telefonoInvalido = telefonosInvalidos[Math.floor(Math.random() * telefonosInvalidos.length)];",
							"",
							"pm.environment.set('telefono_invalido', telefonoInvalido);",
							"console.log('Teléfono inválido generado:', telefonoInvalido);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql('El campo \\'Teléfono\\' debe validar que contenga solo números');",
							"});",
							"",
							"console.log('Validaciones completadas para error de teléfono con letras');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"{{telefono_invalido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Teléfono Muy Corto",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"{{telefono_corto}}\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"El campo 'Teléfono' debe tener al menos 7 dígitos\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Teléfono Muy Corto",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar teléfonos muy cortos",
							"const telefonosCortos = ['123456', '12345', '1234', '123', '12', '1'];",
							"const telefonoCorto = telefonosCortos[Math.floor(Math.random() * telefonosCortos.length)];",
							"",
							"pm.environment.set('telefono_corto', telefonoCorto);",
							"console.log('Teléfono corto generado:', telefonoCorto);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql('El campo \\'Teléfono\\' debe validar que contenga solo números y una longitud mínima de 7 dígitos');",
							"});",
							"",
							"console.log('Validaciones completadas para error de teléfono muy corto');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Farmacia San José\",\n  \"email\": \"ventas@farmacia.com\",\n  \"phone\": \"{{telefono_corto}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Email Duplicado",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Otra Farmacia\",\n  \"email\": \"{{email_duplicado}}\",\n  \"phone\": \"3009876543\"\n}"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Ya existe un proveedor con este correo electrónico\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Múltiples Errores",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar múltiples errores",
							"const nombresInvalidos = ['', 'Farmacia@José#123'];",
							"const emailsInvalidos = ['email-invalido', 'ventas@', 'ventasfarmacia.com'];",
							"const telefonosInvalidos = ['123', '300-123-4567', '123456'];",
							"",
							"const nombreInvalido = nombresInvalidos[Math.floor(Math.random() * nombresInvalidos.length)];",
							"const emailInvalido = emailsInvalidos[Math.floor(Math.random() * emailsInvalidos.length)];",
							"const telefonoInvalido = telefonosInvalidos[Math.floor(Math.random() * telefonosInvalidos.length)];",
							"",
							"pm.environment.set('nombre_multi_error', nombreInvalido);",
							"pm.environment.set('email_multi_error', emailInvalido);",
							"pm.environment.set('telefono_multi_error', telefonoInvalido);",
							"",
							"console.log('Múltiples errores generados:');",
							"console.log('Nombre:', nombreInvalido);",
							"console.log('Email:', emailInvalido);",
							"console.log('Teléfono:', telefonoInvalido);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de la respuesta de error",
							"pm.test('Response has error structure', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"// Validar que el error contenga información sobre los campos inválidos",
							"pm.test('Error contains validation info', function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"    pm.expect(jsonData.error.length).to.be.greaterThan(0);",
							"});",
							"",
							"// Validar que el error sea específico de validación",
							"pm.test('Error is validation-specific', function () {",
							"    const jsonData = pm.response.json();",
							"    const errorText = jsonData.error.toLowerCase();",
							"    pm.expect(errorText).to.satisfy(function(text) {",
							"        return text.includes('obligatorio') || text.includes('formato') || text.includes('válido') || text.includes('caracteres');",
							"    });",
							"});",
							"",
							"console.log('Validaciones completadas para múltiples errores');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{nombre_multi_error}}\",\n  \"email\": \"{{email_multi_error}}\",\n  \"phone\": \"{{telefono_multi_error}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Content-Type Incorrecto",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "name: Farmacia San José"
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Content-Type no soportado. Use application/json o multipart/form-data\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Logo Tipo de Archivo Inválido (JSON)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_logo_invalido', nombreAleatorio);",
							"pm.environment.set('email_logo_invalido', emailAleatorio);",
							"pm.environment.set('telefono_logo_invalido', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Logo Inválido (JSON):');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea exitosa o de error",
							"pm.test('Status code is 201, 400 or 500', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData).to.have.property('data');",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('error');",
							"    }",
							"});",
							"",
							"// Validar comportamiento específico según el código de respuesta",
							"pm.test('Response behavior is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        // Si es éxito, validar que el proveedor se creó correctamente",
							"        pm.expect(jsonData.message).to.include('registrado');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        pm.expect(jsonData.data).to.have.property('name');",
							"    } else {",
							"        // Si es error, validar mensaje de error de imagen",
							"        pm.expect(jsonData.error).to.include('imagen');",
							"        pm.expect(jsonData.error).to.include('válida');",
							"    }",
							"});",
							"",
							"console.log('Validaciones completadas para logo tipo inválido (JSON)');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_logo_invalido}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_logo_invalido}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_logo_invalido}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": [
				{
					"name": "Error - Logo Tipo Inválido (JSON)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{nombre_logo_invalido}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email_logo_invalido}}",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "{{telefono_logo_invalido}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url_local_proveedor}}/providers",
							"host": [
								"{{url_local_proveedor}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Error de negocio: Error al crear proveedor: Error al crear proveedor: El archivo debe ser una imagen válida (JPG, PNG, GIF)\"\n}"
				}
			]
		},
		{
			"name": "Validaciones - Logo Tipo de Archivo Inválido (PDF)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_logo_pdf', nombreAleatorio);",
							"pm.environment.set('email_logo_pdf', emailAleatorio);",
							"pm.environment.set('telefono_logo_pdf', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Logo PDF:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea exitosa o de error",
							"pm.test('Status code is 201, 400 or 500', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData).to.have.property('data');",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('error');",
							"    }",
							"});",
							"",
							"// Validar comportamiento específico según el código de respuesta",
							"pm.test('Response behavior is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        // Si es éxito, validar que el proveedor se creó correctamente",
							"        pm.expect(jsonData.message).to.include('registrado');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        pm.expect(jsonData.data).to.have.property('name');",
							"    } else {",
							"        // Si es error, validar mensaje de error de imagen",
							"        pm.expect(jsonData.error).to.include('imagen');",
							"        pm.expect(jsonData.error).to.include('válida');",
							"    }",
							"});",
							"",
							"console.log('Validaciones completadas para logo tipo inválido (PDF)');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_logo_pdf}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_logo_pdf}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_logo_pdf}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validaciones - Logo Tipo de Archivo Inválido (TXT)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_logo_txt', nombreAleatorio);",
							"pm.environment.set('email_logo_txt', emailAleatorio);",
							"pm.environment.set('telefono_logo_txt', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Logo TXT:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea exitosa o de error",
							"pm.test('Status code is 201, 400 or 500', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData).to.have.property('data');",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('error');",
							"    }",
							"});",
							"",
							"// Validar comportamiento específico según el código de respuesta",
							"pm.test('Response behavior is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        // Si es éxito, validar que el proveedor se creó correctamente",
							"        pm.expect(jsonData.message).to.include('registrado');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        pm.expect(jsonData.data).to.have.property('name');",
							"    } else {",
							"        // Si es error, validar mensaje de error de imagen",
							"        pm.expect(jsonData.error).to.include('imagen');",
							"        pm.expect(jsonData.error).to.include('válida');",
							"    }",
							"});",
							"",
							"console.log('Validaciones completadas para logo tipo inválido (TXT)');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_logo_txt}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_logo_txt}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_logo_txt}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validaciones - Logo Archivo Vacío",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el proveedor",
							"const nombres = ['Farmacia San José', 'Farmacia ABC', 'Farmacia XYZ', 'Farmacia Central', 'Farmacia del Norte', 'Farmacia Sur', 'Farmacia Este', 'Farmacia Oeste', 'Farmacia Premium', 'Farmacia Express'];",
							"const dominios = ['gmail.com', 'hotmail.com', 'yahoo.com', 'farmacia.com', 'salud.com', 'medicina.com'];",
							"",
							"// Seleccionar nombre aleatorio",
							"const nombreAleatorio = nombres[Math.floor(Math.random() * nombres.length)];",
							"",
							"// Generar email aleatorio",
							"const usuarioAleatorio = 'ventas' + Math.floor(Math.random() * 1000);",
							"const dominioAleatorio = dominios[Math.floor(Math.random() * dominios.length)];",
							"const emailAleatorio = usuarioAleatorio + '@' + dominioAleatorio;",
							"",
							"// Generar teléfono aleatorio (mínimo 7 dígitos)",
							"const telefonoAleatorio = '3' + Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');",
							"",
							"// Guardar en variables de entorno",
							"pm.environment.set('nombre_logo_vacio', nombreAleatorio);",
							"pm.environment.set('email_logo_vacio', emailAleatorio);",
							"pm.environment.set('telefono_logo_vacio', telefonoAleatorio);",
							"",
							"console.log('Datos generados para Logo Vacío:');",
							"console.log('Nombre:', nombreAleatorio);",
							"console.log('Email:', emailAleatorio);",
							"console.log('Teléfono:', telefonoAleatorio);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea exitosa o de error",
							"pm.test('Status code is 201, 400 or 500', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 500]);",
							"});",
							"",
							"// Validar estructura de la respuesta",
							"pm.test('Response has correct structure', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData).to.have.property('data');",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('error');",
							"    }",
							"});",
							"",
							"// Validar comportamiento específico según el código de respuesta",
							"pm.test('Response behavior is correct', function () {",
							"    const jsonData = pm.response.json();",
							"    if (pm.response.code === 201) {",
							"        // Si es éxito, validar que el proveedor se creó correctamente",
							"        pm.expect(jsonData.message).to.include('registrado');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        pm.expect(jsonData.data).to.have.property('name');",
							"    } else {",
							"        // Si es error, validar mensaje de error de imagen",
							"        pm.expect(jsonData.error).to.include('imagen');",
							"        pm.expect(jsonData.error).to.include('válida');",
							"    }",
							"});",
							"",
							"console.log('Validaciones completadas para logo archivo vacío');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nombre_logo_vacio}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email_logo_vacio}}",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "{{telefono_logo_vacio}}",
							"type": "text"
						},
						{
							"key": "logo",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_proveedor}}/providers",
					"host": [
						"{{url_local_proveedor}}"
					],
					"path": [
						"providers"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url_local_proveedor",
			"value": "http://localhost:8082",
			"type": "string"
		}
	]
}